Explain code

<HTML>
1. @submit.prevent
 - When you click the submit button, it stops the page from refreshing.
 - Make the form work smoothy without reloading
  for example code: <form @submit.prevent="">

2. v-model
 - Connects the input field to the data
 - When you type sth, it automatically saves what you typed
  for example code: <input v-model="" placeholder="" required />

3. form.company
 - Just a place to store the company name
 - part of the form data
  for example code: <input v-model="" placeholder="" required />

4. placeholder and required
 - Placeholder: shows helpful text when the field is empty
 - required: Make sure you fill in important information
  for example code: <input v-model="" placeholder="" required />
 
5. textarea and row ="2"
 - textarea: A bigger box for writing longer notes
 - rows="2" : Makes the box 2 line tall
  for example code: <textarea v-model="" placeholder="Notes..." rows="2"></textarea> 

5. div v-if
 - div(division) is the most basic container element in HTML 
 - It's used to group and sturcture other elements 
 - v-if is.. As Vue's directive, "show this element on screen only when this condition is true"
 - v-if="applications.length" -> The list is only displayed on the screen when you register at least one application.
 - v-for="(app, index) in application"
   -> app: current item in array (individual application object)
   -> index: order of the current item in the array (staring from 0)
   -> key="index" : unique identifier for each item 
    so, Repeat each item(app)in applications array, create a div by that number, and use each index as a key to distinguish it uniquelty

=========================================
  for example code: 
  <div v-if="applications.length">
  <div v-for="(app, index) in applications" :key="index">
    <strong>{{ app.company }}</strong> – {{ app.position }}<br />
    Date: {{ app.date }} | Score: {{ app.score }}%<br />
    <em>{{ app.notes }}</em><br />
    <button @click="removeApplication(index)">Delete</button>
  </div>
  </div>
==========================================

if i analyze the entire code above, it is as follows.

1. if there is at least one job application, then show this block
  - v-if="applications.length"

2. loop through each job application in the list. 
  - v-for="(app, index) in applications"
  - app: one job application item
  - index: its number in the list (0, 1, 2...)

3. helps Vue keep track of each item
  - :key="index" -> It’s like giving each row a name or ID.

4. detail function inside the loop
   - show the company name in bold 
     - <strong>{{ app.company }}</strong>
   - show the job position next to it
     - – {{ app.position }}
   - how much this application matches the job
     - Score: {{ app.score }}%


<Script>
1. importing basic Vue features.
2. reactive object that stores user input.
3. An empty array that will store all the job applications.
4. When the app starts, load stored data in localstorage.
5. check if anything changes as add or delete.
6. takes the user input from form
7. delete one item from the list
 
 App flow
            ┌────────────────────┐
            │ User fills the form│
            │  (Company, Date...)│
            └────────┬───────────┘
                     │
                     ▼
           ┌──────────────────────┐
           │ Clicks "Add" button  │
           └────────┬─────────────┘
                    ▼
        ┌────────────────────────────┐
        │ addApplication() function │
        └────────┬──────────────────┘
                 ▼
     ┌───────────────────────────────┐
     │ Data is pushed to applications│
     └────────┬──────────────────────┘
              ▼
 ┌─────────────────────────────────────┐
 │ List updates → page displays each  │
 │ item using v-for loop              │
 └────────────────┬───────────────────┘
                  ▼
       ┌────────────────────┐
       │ watch() detects it │
       └────────┬───────────┘
                ▼
     ┌────────────────────────────┐
     │ Data is saved to           │
     │ localStorage               │
     └────────────────────────────┘

       ⬇ Next time you open the page:

           ┌────────────────────────────┐
           │ onMounted() loads saved   │
           │ applications from browser │
           └────────────┬──────────────┘
                        ▼
               ┌────────────────────┐
               │ Page shows them!   │
               └────────────────────┘




==============================================================
23 April / 2025

Job Application Tracker – Flow Map

[User input]
     ↓
+-----------------------------+
|        Input Form (Form)       |
|-----------------------------|
| 1. Company                  |
| 2. Location                 |
| 3. Position                 |
| 4. Employment Type          |
| 5. Date                     |
| 6. Cover Letter (Yes/No)    |
| 7. Notes                    |
+-----------------------------+
     ↓   (When button click, @submit.prevent → addApplication())
     
[form.value → pushed to applications array]
     ↓
[applications array updates]
     ↓
[watch saves to localStorage automatically]
     ↓
+-----------------------------+
|       Table Render          |
+-----------------------------+
| # | Company | ... | Notes | Action |
|---|---------|-----|-------|--------|
| 1 | Google  | ... | memo  | Delete |
+-----------------------------+

Notes cell clicked
     ↓
[editingIndex updated → cell becomes <input>]
     ↓
[User types and presses blur or Enter]
     ↓
[app.notes updated -> localStorage updated via watch]


When Reloading the Page
[onMounted]
     ↓
[Load from localStorage -> JSON.parse]
     ↓
[application.value = saved data]
     ↓
[Table renders automatically]



-------------------------------------------------------

vue-job-tracker/
 ├─ public/
 ├─ src/
 │   ├─ assets/
 │   ├─ components/
 │   ├─ pages/
 │   │   ├─ ResumePage.vue      # Resume Appication page
 │   │   └─ ApplicationsPage.vue # Managing Application page
 │   ├─ router/
 │   │   └─ index.js             # Setting Vue Router 
 │   ├─ App.vue
 │   ├─ main.js
 │   └─ style.css
 ├─ package.json
 ├─ vite.config.js

------------------------------------------------------------------

🌟 Overall flowchart (Updated)
1. Application Tracker
1-1 Main Screen

Application Registration Form

List of registered applications (card type)

On each application card:

Match Score: None (Upload Resume to Match)

1-2 action

User enters Job Application and piles up as a card in the Add ➔ list

Matching scores are always marked as "None"

2. Resume Page (New)
2-1 Features

If you want to copy your resume

Upload files (.txt, .pdf, etc.)

2-2 Operation

Save resume (local or DB)

Make JD-matched based on saved resume

(Matching cannot be attempted without Resume)

3. Matching function (future)
JD Input or Crawling

User pastes or enters JD content

Matching Request button

If you press the button, send your resume + JD to the Groq AI server

Matching Score Calculation

Update Results

Reflect Match Score (%) on the application card


-------------------------------------------------

[Non-members] → Disable the matching button

[Membership/Login]
↓
[Free points (First 5 points)]
↓
[Matching using up the points]
↓
(In case of lack of points)
↓
[Playing games or paying]


-----------------------------------------------------

[1] Save resume
↓
[2] Paste or enter JD
↓
[3] [Match button] Press
↓
[4] Request to Groq AI server (Resume + JD)
↓
[5] Get matching points (%)
↓
[6] Update score to corresponding support card
